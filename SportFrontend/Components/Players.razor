
@page "/playerindex"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient HttpClient
@using SharedDTO


@if (playerGrid is null)
{
    <p>Loading....</p>
}
else
{
    <div class="flex-md-column">
        <a href="/playeradd" class="btn btn-outline-info mt-4">új játékos hozzáadása</a>
    </div>
    <div class="quickgrid">
        <QuickGrid Class="table" ItemsProvider="@playerGrid">
            <PropertyColumn Title="Név" Property="@(fn=>fn.FullName)" />
            <PropertyColumn Title="Születési dátum" Property="@(sze=>sze.DateofBirth)" Format="yyyy.MM.dd" />
            <PropertyColumn Title="Életkor" Property="@(e=>e.Position)" />
            <PropertyColumn Title="Csapatnév" Property="@(p=>p.TeamName)" />
                <TemplateColumn Context="player">
                <a href="@($"/deleteplayer?PlayerId={player.PlayerId}")" class="btn btn-outline-info">Törlés</a>
                </TemplateColumn>
        </QuickGrid>
    </div>
}

@code {
    List<PlayerDTO> playerList = new();
    GridItemsProvider<PlayerDTO>? playerGrid;

    private string searchPlayer = string.Empty;
    private string errormessage = string.Empty;
    private bool isLoading = false;


    protected override async Task OnInitializedAsync()
    {
        await LoadPlayersAsync("Sport/Player");
    }


    private async Task LoadPlayersAsync(string url)
    {
        errormessage = string.Empty;
     
        if (isLoading)
            return;

        isLoading = true; 

        try
        {
            playerList = await HttpClient.GetFromJsonAsync<List<PlayerDTO>>(url);
            UpdateGrid();
        }
        catch (Exception ex)
        {
            errormessage = $"A keresésre nincs találat: {ex.Message}";
        }
        finally
        {
            isLoading = false; 
        }
    }

    private void UpdateGrid()
    {
        playerGrid = async request =>
       {
           return GridItemsProviderResult.From(playerList, playerList.Count);
       };
    }
}
